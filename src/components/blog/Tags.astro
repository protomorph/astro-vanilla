---
import type { HTMLAttributes } from 'astro/types'

import { getAllTags } from '@src/utils/blog'

interface Props {
  attrs?: HTMLAttributes<'ul'>
  count?: boolean
  limit?: number
  title?: string | false
}

const { count, limit, title = 'Tags', ...attrs } = Astro.props
const tags = await getAllTags(limit)
---

<section>
  {title && <h2>{title}</h2>}
  <ul role="list" {...attrs}>
    {tags.length > 0 ? tags.map(({ count, href, name }) => (
      <li role="listitem"><a href={href}><i>#</i>{name}<span>{count}</span></a></li>
    )) : (
      <li class="no-tags" role="listitem">No Tags</li>
    )}
  </ul>
  {count && <p><b>{tags.length}</b> tags</p>}
</section>

<style>
  section:not(:last-child) {
    margin-block-end: 24px;
  }
  section > h2 {
    text-align: center;
  }
  ul {
    display: flex;
    flex-wrap: wrap;
    gap: 16px;
    justify-content: center;
    list-style: none;
    margin: 0;
    padding: 0;
  }
  .no-tags {
    color: var(--text-color-mid);
    text-align: center;
  }
  a {
    align-items: center;
    color: var(--text-color-mid);
    display: flex;
    font-size: 1.25rem;
    text-decoration: none;
  }
  a > i {
    color: var(--text-color-mute);
    font-size: 1rem;
  }
  a > span {
    background-color: var(--accent);
    border-radius: .5em;
    color: var(--text-on-accent);
    font-size: .75rem;
    font-weight: 800;
    line-height: 1.5rem;
    margin-inline-start: 6px;
    min-inline-size: 1.5rem;
    text-align: center;
  }
  p {
    margin: 16px 0 0 0;
    text-align: center;
  }
  p > b {
    color: var(--accent);
    font-weight: 800;
  }
</style>
