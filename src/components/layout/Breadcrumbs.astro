---
import { permalink } from '@src/utils/permalink'

interface Props {
  base?: string
  separator?: string
  title?: string
}

type CrumbItem = {
  end: boolean
  href: string
  title: string
}

const titlecase = (txt: string) => txt.replace(
  /\w\S*/g, (t) => t.charAt(0).toUpperCase() + t.substring(1).toLowerCase()
)

const { base = 'Home', separator = '&gt;', title } = Astro.props
const pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, '')
const segments = pathname.split('/').filter(Boolean)

const crumbs = [base, ...segments].map((part, i) => ({
  end: segments.length === i,
  href: permalink.root(segments.slice(0, i).join('/')),
  title: titlecase(part.replace(/[-_]/g, ' ')),
})) as CrumbItem[]

const home = crumbs.length === 1

if (Number(crumbs.at(-1)!.title)) {
  const c = crumbs.at(-2) as CrumbItem
  c.title = title as string
} else {
  const c = crumbs.at(-1) as CrumbItem
  c.title = title as string
}
---

{! home && (<nav aria-labelledby="breadcrumb-label">
  <h2 class="sr-only" id="breadcrumb-label">Breadcrumbs</h2>
  <ol role="list">
    {crumbs.map((crumb) => (
      <li role="listitem">
        <a href={crumb.href} aria-current={crumb.end ? 'page' : undefined}>{crumb.title}</a>
        {! crumb.end && <span role="separator" set:html={separator} />}
      </li>
    ))}
  </ol>
</nav>)}

<style>
  nav {
    align-content: start;
    container-type: inline-size;
    display: grid;
    grid-template-columns: var(--breakout-columns);
    margin-block-start: 16px;
  }
  ol {
		background-color: color-mix(in hsl, var(--bg-color-mute) 48%, var(--bg-color));
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    grid-column: 2 / 3;
    list-style: none;
    margin: 0;
    padding: 12px 16px;
  }
  @container (inline-size > 720px) {
    ol {
      border-radius: 12px;
    }
  }
  li {
    display: contents;
    font-size: .875rem;
    line-height: 1.5rem;
  }
  a {
    text-decoration: none;
  }
  [aria-current="page"] {
    color: var(--text-color-mid);
    font-weight: 700;
  }
  [role="separator"] {
    color: var(--text-color-mute);
  }
</style>
